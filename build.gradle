buildscript
{
    repositories
    {
        jcenter()
        maven {
            name = "Forge Maven"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.ajoberstar:grgit:2.2.0'
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'

def username = project.mod_id
if (project.hasProperty('dev_mail'))
{
    username = findProperty('dev_mail')
}
else if (project.hasProperty('dev_username'))
{
    username = findProperty('dev_username')
}

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-" + buildVersion
def change_log = ext.changeLog

tasks.build.doLast {
    println("Current version is ${project.mod_group}:${project.mod_name}:${project.version}")
    println("Changelog:")
    println(change_log)
}

group = project.mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.
compileJava
{
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft
{
    version = "${project.mc_version}-${project.forge_version}"
    if (project.hasProperty('runDir'))
    {
        runDir = findProperty('runDir')
    }
    else if (file('../run').exists())
    {
        runDir = "../run"
    }
    else
    {
        runDir = "run"
    }
    println('run directory: ' + runDir.toString())

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.forge_mappings
    if("${mappings}" != "${project.ext.mappings}") {
        println(String.format("You are on old mappings, latest mappings are %s (you are on %s)", project.ext.mappings, mappings))
    }

    makeObfSourceJar = project.make_source_jar // an Srg named sources jar is made by default.

    replace "@VERSION@", buildVersion
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replaceIn "${project.reference_class}".replace(".", "/") + ".java"

    //auto-configure the run arguments
    if(project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    }
    else {
        clientRunArgs += "--username=${username}"
        if(project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    serverJvmArgs += "-Dfml.doNotBackup=true"
    clientJvmArgs += "-Dfml.doNotBackup=true"

    // skip having to confirm on server
    serverJvmArgs += "-Dfml.queryResult=confirm"

    // disable server gui
    serverRunArgs += "nogui"

    //skip jansi warnings in the log
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
}

if (JavaVersion.current().isJava8Compatible())
{
    allprojects
    {
        tasks.withType(Javadoc)
        {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

jar {
    from "LICENSE"
    manifest.mainAttributes(
            "Implementation-Title": project.mod_name,
            "Implementation-Version": project.version,
            "Built-On": "${project.mc_version}-${project.forge_version}",
            "Timestamp": new Date().getTime(),
            "Maven-Artifact":"${project.mod_group}:${project.mod_name}:${project.version}"
            //"FMLAT": "${project.mod_id}_at.cfg" //uncomment when adding access transformers
    )
    classifier '' //this is the main jar!
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

repositories {
    maven {
        url 'http://maven.tterrag.com/'
    }
}

dependencies
{
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "team.chisel.ctm:CTM:MC1.12-0.2.3.12"
}
tasks.build.dependsOn signJar
tasks.curseforge.dependsOn build

def curseRelations = {
    optionalLibrary 'ctm' //add curseforge-slug here
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if(project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = change_log
            releaseType = project.release_type

            relations curseRelations

            //no such jars for now
            //addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            //addGameVersion '1.12'
            //addGameVersion '1.12.1'
            //addGameVersion '1.12.2'

            mainArtifact(jar) {
                displayName = "${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs)
    {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs)
    {
        exclude 'mcmod.info'
    }

    //ATs
    rename '(.+_at.cfg)', 'META-INF/$1'
}
